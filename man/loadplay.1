.Dd 20 February, 2019
.Dt loadplay 1
.Os
.Sh NAME
.Nm loadplay
.Nd CPU load player
.Sh SYNOPSIS
.Nm
.Fl h
.Nm
.Op Fl i Ar file
.Op Fl o Ar file
.Ar command Op ...
.Sh DESCRIPTION
The
.Nm
command replays a load recording created with
.Xr loadrec 1 .
The
.Ar command
can either be
.Xr powerd 8
or
.Xr powerd++ 8 ,
compatibility with other tools has not been tested.
.Ss OPTIONS
The following options are supported:
.Bl -tag -width indent
.It Fl h , -help
Show usage and exit.
.It Fl i , -input Ar file
Read load recording from
.Ar file
instead of
.Pa stdin .
.It Fl o , -output Ar file
Output statistics to
.Ar file
instead of
.Pa stdout .
.El
.Sh USAGE NOTES
The
.Nm
command injects
.Pa libloadplay.so
into
.Ar command .
This library simulates the load from the input and outputs load statistics.
.Ss OUTPUT
The first line of output contains column headings, columns are separated
by a single space.
.Pp
The Following columns are present, columns containing
.Ic %d
occur for each core simulated:
.Bl -tag -width indent
.It Ic time[s]
The simulation progress in 0.001 second resolution.
.It Ic cpu.%d.rec.freq[MHz]
The recorded clock frequency, sampled at the end of the frame.
.It Ic cpu.%d.rec.load[MHz]
The recorded load in 0.1 MHz resolution.
.It Ic cpu.%d.run.freq[MHz]
The simulated clock frequency set by the host process, sampled at
the end of the frame.
.It Ic cpu.%d.run.load[MHz]
The simulated load in 0.1 MHz resolution.
.El
.Pp
.Ss SAMPLING
There is one sample for each recorded line. The duration of each frame
depends on the recording, which defaults to 25\ ms. 
At this sample rate loads are dominated by noise, so a gliding average
should be applied to any load columns for further use, such as plotting.
.Sh IMPLEMENTATION NOTES
The injected
.Pa libloadplay.so
works by intercepting system function calls and substituting the host
environment with the recording. To achieve this the following function
calls are intercepted:
.Bl -bullet
.It
.Xr sysctl 3 , Xr sysctlnametomib 3 , Xr sysctlbyname 3
.It
.Xr daemon 3
.It
.Xr geteuid 2
.It
.Xr pidfile_open 3 , Xr pidfile_write , Xr pidfile_close 3 ,
.Xr pidfile_remove 3 , Xr pidfile_fileno 3
.El
.Ss INITIALISATION
The
.Nm sysctl
family of functions is backed by a table that is initialised from
the header of the load recording. If the heading is incomplete the
setup routines print a message on
.Pa stderr .
All the following intercepted function calls will return failure,
ensuring that the host process is unable to operate and terminates.
.Pp
Like
.Xr powerd++ 8
and
.Xr loadrec 1
.Nm
is core agnostic. Meaning that any core may have a
.Ic .freq
and
.Ic .freq_levels
sysctl handle. Due to this flexibility load recordings may in part
or wholly be fabricated to test artificial loads or systems and features
that do not yet exist. E.g. it is possible to offer a
.Ic .freq
handle for each core or fabricate new
.Ic .freq_levels .
.Ss SIMULATION
If setup succeeds a simulation thread is started that reads the remaining
input lines, simulates the load and updates the
.Nm kern.cp_times
entry in the thread safe sysctl table. For each frame a line of output
with load statistics is produced.
.Pp
Interaction with the host process happens solely through the sysctl
table. The simulation reads the recorded loads and the current core
frequencies to update
.Nm kern.cp_times .
The host process reads this data and adjusts the clock frequencies,
which in turn affects the next frame.
.Ss FINALISATION
After reading the last line of input the simulation thread sends a
.Nm SIGINT
to the process to cause it to terminate.
.Sh ENVIRONMENT
.Bl -tag -width indent
.It Ev LOADPLAY_IN
If set the file named is used for input instead of
.Pa stdin .
This only affects the input of
.Nm ,
the host process is not affected.
.It Ev LOADPLAY_OUT
If set the file named is used for output instead of
.Pa stdout .
This only affects the output of
.Nm ,
the host process is not affected.
.It Ev LD_PRELOAD
Used to inject
.Pa libloadplay.so
into the host process.
.El
.Sh FILES
.Bl -tag -width indent
.It Pa %%PREFIX%%/lib/libloadplay.so
A library injected into
.Ar command
via the
.Ev LD_PRELOAD
environment variable.
.El
.Sh EXAMPLES
Play a load recording with
.Nm :
.Bd -literal -offset 4m
> loadplay -i loads/freq_tracking.load powerd++
time[s] cpu.0.rec.freq[MHz] cpu.0.rec.load[MHz] cpu.0.run.freq[MHz] cpu.0.run.load[MHz] cpu.1.rec.freq[MHz] cpu.1.rec.load[MHz] cpu.1.run.freq[MHz] cpu.1.run.load[MHz] cpu.2.rec.freq[MHz] cpu.2.rec.load[MHz] cpu.2.run.freq[MHz] cpu.2.run.load[MHz] cpu.3.rec.freq[MHz] cpu.3.rec.load[MHz] cpu.3.run.freq[MHz] cpu.3.run.load[MHz]
0.025 1700 1700.0 1700 1700.0 1700 0.0 1700 0.0 1700 1700.0 1700 1700.0 1700 850.0 1700 850.0
0.050 1700 1700.0 1700 1700.0 1700 1700.0 1700 1700.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0
0.075 1700 566.7 1700 566.6 1700 1700.0 1700 1700.0 1700 0.0 1700 0.0 1700 566.7 1700 566.6
0.100 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0
0.125 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0
0.150 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0
0.175 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0
0.200 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0
0.225 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0
0.250 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0
0.275 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0 1700 0.0
.Ed
.Pp
Capture load and
.Nm
output simultaneously into two different files:
.Bd -literal -offset 4m
> loadplay -i loads/freq_tracking.load -o load.csv powerd++ -f > load.out
.Ed
.Pp
Capture and display
.Nm
output:
.Bd -literal -offset 4m
> loadplay -i loads/freq_tracking.load -o load.csv powerd++ -f | tee load.out
power:  online, load:  527 MHz, cpu0.freq: 1700 MHz, wanted: 1405 MHz
power:  online, load:  459 MHz, cpu0.freq: 1400 MHz, wanted: 1224 MHz
power:  online, load:  502 MHz, cpu0.freq: 1200 MHz, wanted: 1338 MHz
power:  online, load:  548 MHz, cpu0.freq: 1300 MHz, wanted: 1461 MHz
power:  online, load:  704 MHz, cpu0.freq: 1500 MHz, wanted: 1877 MHz
power:  online, load:  750 MHz, cpu0.freq: 1900 MHz, wanted: 2000 MHz
power:  online, load:  805 MHz, cpu0.freq: 2000 MHz, wanted: 2146 MHz
power:  online, load:  772 MHz, cpu0.freq: 2200 MHz, wanted: 2058 MHz
power:  online, load:  574 MHz, cpu0.freq: 2000 MHz, wanted: 1530 MHz
power:  online, load:  515 MHz, cpu0.freq: 1500 MHz, wanted: 1373 MHz
.Ed
.Sh SEE ALSO
.Xr loadrec 1 , Xr powerd 8 , Xr powerd++ 8 , Xr rtld 1 , Xr signal 3 ,
.Xr tee 1
.Sh AUTHORS
Implementation and manual by
.An Dominic Fandrey Aq Mt kami@freebsd.org
